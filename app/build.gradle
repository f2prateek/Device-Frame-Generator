buildscript {
  repositories {
    mavenCentral()
    maven { url 'http://download.crashlytics.com/maven' }
    maven { url "https://github.com/ben-manes/gradle-versions-plugin/raw/mvnrepo" }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.9.+'
    classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.8.1'
    classpath 'com.stanfy.spoon:spoon-gradle-plugin:0.9.5'
    classpath 'com.jakewharton.hugo:hugo-plugin:1.0.1'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.5-beta-1'
  }
}

apply plugin: 'android'
apply plugin: 'crashlytics'
apply plugin: 'checkstyle'
apply plugin: 'spoon'
apply plugin: 'hugo'
apply plugin: 'versions'

dependencies {
  repositories {
    mavenCentral()
    maven { url 'http://download.crashlytics.com/maven' }
  }

  compile 'com.android.support:support-v13:19.1.0'
  compile 'com.android.support:support-v4:19.1.0'
  compile 'com.crashlytics.android:crashlytics:1.1.11'
  compile 'com.jakewharton:butterknife:5.0.0'
  compile 'com.squareup:otto:1.3.4'
  compile 'com.squareup.dagger:dagger:1.2.1'
  provided 'com.squareup.dagger:dagger-compiler:1.2.1'
  compile 'com.squareup.picasso:picasso:2.2.0'
  compile 'com.f2prateek.ln:ln:1.1.1'
  compile 'com.f2prateek.dart:dart:1.1.0'
  compile 'com.github.frankiesardo:android-auto-value:0.1'
  provided 'com.github.frankiesardo:android-auto-value-processor:0.1'
  compile 'de.keyboardsurfer.android.widget:crouton:1.8.4@aar'
  compile 'com.astuetz:pagerslidingtabstrip:1.0.1'
  debugCompile 'com.jakewharton.scalpel:scalpel:1.1.2'
  debugCompile 'com.jakewharton.madge:madge:1.1.1'
  androidTestCompile 'com.squareup:fest-android:1.0.7'
  androidTestCompile 'com.squareup.spoon:spoon-client:1.1.1'
}

def versionMajor = 3
def versionMinor = 0
def versionPatch = 2
// bump for dogfood builds, public betas, etc.
def versionBuild = 0

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

def isTravis = "true".equals(System.getenv("TRAVIS"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

android {
  compileSdkVersion 19
  buildToolsVersion '19.0.3'

  dexOptions {
    // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
    preDexLibraries = preDexEnabled && !isTravis
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  lintOptions {
    abortOnError false
  }

  testBuildType "debug"

  signingConfigs {
    release
  }

  buildTypes {
    debug {
      packageNameSuffix ".debug"
      versionNameSuffix "-debug"
    }
    release {
      signingConfig signingConfigs.release
      runProguard false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
    }
  }

  defaultConfig {
    minSdkVersion 14
    targetSdkVersion 19

    packageName "com.f2prateek.dfg"
    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }
}

checkstyle {
  configFile project.file('../checkstyle.xml')
  showViolations true
}

android.applicationVariants.all { variant ->
  def name = variant.buildType.name

  // Checkstyle task
  def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
  checkstyle.dependsOn variant.javaCompile
  checkstyle.source variant.javaCompile.source
  checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
  checkstyle.exclude('**/BuildConfig.java')
  checkstyle.exclude('**/R.java')
  checkstyle.exclude('**/ForegroundImageView.java')
  checkstyle.exclude('**/SafeAsyncTask.java')
  checkstyle.exclude('**/*\$\$*.java') // Dagger, ButterKnife, Dart
  project.tasks.getByName("check").dependsOn checkstyle

  // Renaming task
  def apk = variant.packageApplication.outputFile;
  def newName = apk.name.replace(".apk",
      "-v${android.defaultConfig.versionName}-${versionBuild}.apk");
  newName = newName.replace("app", "${android.defaultConfig.packageName}");
  variant.packageApplication.outputFile = new File(apk.parentFile, newName);
  if (variant.zipAlign) {
    variant.zipAlign.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
  }
}

def propFile = new File('signing.properties')
if (propFile.canRead()) {
  def Properties signingProps = new Properties()
  signingProps.load(new FileInputStream(propFile))

  if (signingProps != null &&
      signingProps.containsKey('STORE_FILE') &&
      signingProps.containsKey('STORE_PASSWORD') &&
      signingProps.containsKey('KEY_ALIAS') &&
      signingProps.containsKey('KEY_PASSWORD')) {
    android.signingConfigs.release.storeFile = file(signingProps['STORE_FILE'])
    android.signingConfigs.release.storePassword = signingProps['STORE_PASSWORD']
    android.signingConfigs.release.keyAlias = signingProps['KEY_ALIAS']
    android.signingConfigs.release.keyPassword = signingProps['KEY_PASSWORD']
  } else {
    println 'signing.properties found but some entries are missing'
    android.buildTypes.release.signingConfig = null
  }
} else {
  println 'signing.properties not found'
  android.buildTypes.release.signingConfig = null
}
